<?xml version="1.0"?>
<robot name="igo_neo" xmlns:xacro="http://ros.org/wiki/xacro">

  <!-- Define robot constants -->
  <!-- base plate at front part of the vehicle -->
  <xacro:property name="basePlate_width" value="0.80"/>
  <xacro:property name="basePlate_length" value="1.50"/>
  <xacro:property name="basePlate_height" value="0.03"/>
  <xacro:property name="basePlate_ground_clearance" value="0.02"/>
  <xacro:property name="basePlate_mass" value="10.0"/>
  <!-- front compartment of the vehicle (in front of the driver)  -->
  <xacro:property name="frontCompartment_width" value="0.80"/>
  <xacro:property name="frontCompartment_length" value="0.80"/>
  <xacro:property name="frontCompartment_height" value="1.25"/>
  <xacro:property name="frontCompartment_xPos" value="0.00"/>
  <xacro:property name="frontCompartment_mass" value="5.0"/>
  <!-- rear compartment of the vehicle (behind the driver)  -->
  <xacro:property name="rearCompartment_width" value="0.80"/>
  <xacro:property name="rearCompartment_length" value="0.25"/>
  <xacro:property name="rearCompartment_height" value="1.25"/>
  <xacro:property name="rearCompartment_xPos" value="1.25"/>
  <xacro:property name="rearCompartment_mass" value="5.0"/>
  <!-- forks  -->
  <xacro:property name="fork_width" value="0.17"/>
  <xacro:property name="fork_length" value="1.20"/>
  <xacro:property name="fork_height" value="0.03"/>
  <xacro:property name="fork_xPos" value="1.50"/>
  <xacro:property name="fork_distance" value="0.39"/>
  <xacro:property name="fork_ground_clearance" value="0.02"/>
  <xacro:property name="fork_wheel_clearance" value="0.01"/>
  <xacro:property name="fork_mass" value="20.0"/>
  <!-- laser scanner  -->
  <xacro:property name="laserScanner_xPos" value="0.35"/>
  <xacro:property name="laserScanner_yPos" value="0.21"/>
  <xacro:property name="laserScanner_zPos" value="1.48"/>
  <!-- camera -->
  <xacro:property name="camera_xPos" value="0.00"/>
  <xacro:property name="camera_yPos" value="0.00"/>
  <xacro:property name="camera_zPos" value="1.20"/>
  <!-- imu -->
  <xacro:property name="imu_xPos" value="0.00"/>
  <xacro:property name="imu_yPos" value="0.00"/>
  <xacro:property name="imu_zPos" value="1.10"/>
  <!-- caster wheels -->
  <xacro:property name="wheel_radius" value="0.03"/>
  <xacro:property name="wheel_width" value="0.05"/>
  <xacro:property name="wheel_xPos" value="2.15"/>
  <xacro:property name="wheel_mass" value="0.5"/>
  <!-- traction wheel modeled as caster sphere -->
  <xacro:property name="caster_radius" value="0.10"/>
  <xacro:property name="caster_xPos" value="0.20"/>
  <!-- material setting -->
  <xacro:property name="frame_material" value="Cyan"/>
  <xacro:property name="frame_rgba" value="0 1.0 1.0 1.0"/>
  <xacro:property name="wheel_material" value="Gray"/>
  <xacro:property name="wheel_rgba" value="0.5 0.5 0.5 1.0"/>
  <xacro:property name="dummy_mass" value="1.0"/>


  <!-- Calculation of rigid body coordinates -->
  <xacro:property name="basePlate_xOff" value="${wheel_xPos - basePlate_length/2}"/>
  <xacro:property name="basePlate_zOff" value="${(basePlate_ground_clearance + basePlate_height/2) - wheel_radius}"/>
  <xacro:property name="fork_xOff" value="${wheel_xPos - fork_xPos - fork_length/2}"/>
  <xacro:property name="fork_yOff" value="${(fork_distance + fork_width)/2}"/>
  <xacro:property name="fork_zOff" value="${(fork_ground_clearance + fork_height/2) - wheel_radius}"/>
  <xacro:property name="fork_sideBox_width" value="${(fork_width - wheel_width)/2 - fork_wheel_clearance}"/>
  <xacro:property name="fork_midBox_width" value="${fork_wheel_clearance + (fork_width - fork_sideBox_width)/2}"/>
  <xacro:property name="fork_wheel_xOff" value="${-(wheel_xPos - fork_xPos - fork_length/2)}"/>
  <xacro:property name="fork_wheel_zOff" value="${fork_ground_clearance - wheel_radius}"/>
  <xacro:property name="fork_centerBox2_length" value="${fork_length/2 - fork_wheel_xOff - wheel_radius - fork_wheel_clearance}"/>
  <xacro:property name="fork_centerBox1_length" value="${fork_length - fork_centerBox2_length - 2*(wheel_radius + fork_wheel_clearance)}"/>
  <xacro:property name="frontCompartment_xOff" value="${wheel_xPos - frontCompartment_length/2}"/>
  <xacro:property name="frontCompartment_zOff" value="${(frontCompartment_height/2 + basePlate_height/2) - wheel_radius}"/>
  <xacro:property name="rearCompartment_xOff" value="${wheel_xPos - rearCompartment_xPos - rearCompartment_length/2}"/>
  <xacro:property name="rearCompartment_zOff" value="${(rearCompartment_height/2 + basePlate_height/2) - wheel_radius}"/>
  <xacro:property name="caster_xOff" value="${wheel_xPos - caster_xPos}"/>
  <xacro:property name="caster_zOff" value="${caster_radius/2 - basePlate_zOff}"/>
  <xacro:property name="laserScanner_xOff" value="${wheel_xPos - laserScanner_xPos}"/>
  <xacro:property name="laserScanner_yOff" value="${laserScanner_yPos}"/>
  <xacro:property name="laserScanner_zOff" value="${laserScanner_zPos - basePlate_ground_clearance}"/>
  <xacro:property name="camera_xOff" value="${wheel_xPos - camera_xPos}"/>
  <xacro:property name="camera_yOff" value="${camera_yPos}"/>
  <xacro:property name="camera_zOff" value="${camera_zPos - basePlate_ground_clearance}"/>
  <xacro:property name="imu_xOff" value="${wheel_xPos - imu_xPos}"/>
  <xacro:property name="imu_yOff" value="${imu_yPos}"/>
  <xacro:property name="imu_zOff" value="${imu_zPos - basePlate_ground_clearance}"/>
  <!-- old stuff, just for make it run -->
<!--
  <xacro:property name="wheel_xoff" value="0.00"/>
  <xacro:property name="wheel_zoff" value="0.10"/>
  <xacro:property name="y_reflect" value="0.03"/>
  <xacro:property name="wheel_ygap" value="0.01"/>
-->
  <!-- end of old stuff -->

<!--
  <xacro:property name="" value="${}"/>
  <xacro:property name="" value="${}"/>
-->


  <!-- ===================== -->
  <!-- Macros for components -->
  <!-- ===================== -->
  <xacro:macro name="box_inertia" params="m w h d">
    <inertial>
      <origin xyz="0 0 0" rpy="${pi/2} 0 ${pi/2}"/>      
      <mass value="${m}"/>
      <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + d*d)}" iyz="0.0" izz="${(m/12) * (w*w + h*h)}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="cylinder_inertia" params="m r h">
    <inertial>
      <origin xyz="0 0 0" rpy="${pi/2} 0 0" />      
      <mass value="${m}"/>
      <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy = "0" ixz = "0" iyy="${(m/12) * (3*r*r + h*h)}" iyz = "0" izz="${(m/2) * (r*r)}"/> 
    </inertial>
  </xacro:macro>

  <xacro:macro name="sphere_inertia" params="m r">
    <inertial>
      <mass value="${m}"/>
      <inertia ixx="${(2/5) * m * (r*r)}" ixy="0.0" ixz="0.0" iyy="${(2/5) * m * (r*r)}" iyz="0.0" izz="${(2/5) * m * (r*r)}"/>
    </inertial>
  </xacro:macro>
  
  <!-- Frame box -->
  <xacro:macro name="frameBox" params="prefix length width height mass material rgba">
    <link name="${prefix}_link">
      <visual>
        <geometry>
          <box size="${length} ${width} ${height}"/>
        </geometry>
        <material name="${material}">
          <color rgba="${rgba}"/>
        </material>
      </visual>

      <collision>
        <geometry>
          <box size="${length} ${width} ${height}"/>
        </geometry>
      </collision>

      <xacro:box_inertia m="${mass}" w="${width}" d="${length}" h="${height}"/>
    </link>
  </xacro:macro>

  <!-- Wheel -->
  <xacro:macro name="wheel" params="prefix x mass material rgba parentLink" >
    <link name="${prefix}_link">
      <visual>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
            <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
        <material name="${material}">
          <color rgba="${rgba}"/>
        </material>
      </visual>

      <collision>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/> 
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
      </collision>

      <xacro:cylinder_inertia m="${mass}" r="${wheel_radius}" h="${wheel_width}"/>
    </link>

    <joint name="${prefix}_joint" type="continuous">
      <parent link="${parentLink}"/>
      <child link="${prefix}_link"/>
      <origin xyz="${x} 0.0 ${fork_wheel_zOff}" rpy="0 0 0"/>
      <axis xyz="0 1 0"/>
    </joint>
  </xacro:macro>

  <!-- fork element -->
  <xacro:macro name="forkElement" params="prefix x y z parentLink">
    <link name="${prefix}_link">
      <xacro:box_inertia m="${fork_mass}" w="0.1" d="0.1" h="0.1"/>
    </link>

    <xacro:frameBox prefix="${prefix}_box1" length="${fork_length}" 
      width="${fork_sideBox_width}" height="${fork_height}" 
      mass="${dummy_mass}" material="${frame_material}" 
      rgba="${frame_rgba}" 
    />
    <xacro:frameBox prefix="${prefix}_box2" length="${fork_length}" 
      width="${fork_sideBox_width}" height="${fork_height}" 
      mass="${dummy_mass}" material="${frame_material}" 
      rgba="${frame_rgba}" 
    />
    <xacro:frameBox prefix="${prefix}_box3" length="${fork_centerBox1_length}" 
      width="${fork_midBox_width}" height="${fork_height}" 
      mass="${dummy_mass}" material="${frame_material}" 
      rgba="${frame_rgba}" 
    />
    <xacro:frameBox prefix="${prefix}_box4" length="${fork_centerBox2_length}" 
      width="${fork_midBox_width}" height="${fork_height}" 
      mass="${dummy_mass}" material="${frame_material}" 
      rgba="${frame_rgba}" 
    />
<!--
-->
    <joint name="${prefix}_fork_box1_joint" type="fixed">
      <parent link="${prefix}_link"/>
      <child link="${prefix}_box1_link"/>
      <origin xyz="0.0 ${(fork_width - fork_sideBox_width)/2} 0.0" rpy="0 0 0"/>
    </joint>
    <joint name="${prefix}_fork_box2_joint" type="fixed">
      <parent link="${prefix}_link"/>
      <child link="${prefix}_box2_link"/>
      <origin xyz="0.0 ${-(fork_width - fork_sideBox_width)/2} 0.0" rpy="0 0 0"/>
    </joint>
    <joint name="${prefix}_fork_box3_joint" type="fixed">
      <parent link="${prefix}_link"/>
      <child link="${prefix}_box3_link"/>
      <origin xyz="${(fork_length - fork_centerBox1_length)/2} 0.0 0.0" rpy="0 0 0"/>
    </joint>
    <joint name="${prefix}_fork_box4_joint" type="fixed">
      <parent link="${prefix}_link"/>
      <child link="${prefix}_box4_link"/>
      <origin xyz="${-(fork_length - fork_centerBox2_length)/2} 0.0 0.0" rpy="0 0 0"/>
    </joint>
<!--
-->
    <!-- Wheel in fork -->
    <xacro:wheel prefix="${prefix}_wheel" x="${-fork_wheel_xOff}" mass="${wheel_mass}" material="${wheel_material}" rgba="${wheel_rgba}" parentLink="${prefix}_link"/>

    <joint name="${prefix}_link" type="fixed">
      <parent link="${parentLink}"/>
      <child link="${prefix}_link"/>
      <origin xyz="${x} ${y} ${z}" rpy="0 0 0"/>
    </joint>
  </xacro:macro>

  <!-- ===================== -->
  <!-- Components of the bot -->
  <!-- ===================== -->
  <!-- Robot base -->
  <link name="base_link">
  	<xacro:box_inertia m="10" w="0.1" d="0.1" h="0.1"/>
  </link>

  <!-- Base Plate -->
  <xacro:frameBox prefix="basePlate" length="${basePlate_length}" 
    width="${basePlate_width}" height="${basePlate_height}" 
    mass="${basePlate_mass}" material="${frame_material}" 
    rgba="${frame_rgba}" 
  />
  
  <joint name="base_basePlate_joint" type="fixed">
    <parent link="base_link"/>
    <child link="basePlate_link"/>
    <origin xyz="${-basePlate_xOff} 0.0 ${basePlate_zOff}" rpy="0 0 0"/>
  </joint>

   <!-- Robot Footprint -->
  <link name="base_footprint">
  	<xacro:box_inertia m="0" w="0" d="0" h="0"/>
  </link>

  <joint name="base_footprint_joint" type="fixed">
    <parent link="base_link"/>
    <child link="base_footprint"/>
    <origin xyz="${-basePlate_xOff} 0.0 ${basePlate_zOff}" rpy="0 0 0"/>
  </joint>

  <!-- Compartments -->
  <!-- front compartment -->
  <xacro:frameBox prefix="frontCompartment" length="${frontCompartment_length}" 
    width="${frontCompartment_width}" height="${frontCompartment_height}" 
    mass="${frontCompartment_mass}" material="${frame_material}" 
    rgba="${frame_rgba}" 
  />

  <joint name="base_frontCompartment_joint" type="fixed">
    <parent link="base_link"/>
    <child link="frontCompartment_link"/>
    <origin xyz="${-frontCompartment_xOff} 0.0 ${frontCompartment_zOff}" rpy="0 0 0"/>
  </joint>

  <!-- rear compartment -->
  <xacro:frameBox prefix="rearCompartment" length="${rearCompartment_length}" 
    width="${rearCompartment_width}" height="${rearCompartment_height}" 
    mass="${rearCompartment_mass}" material="${frame_material}" 
    rgba="${frame_rgba}" 
  />

  <joint name="base_rearCompartment_joint" type="fixed">
    <parent link="base_link"/>
    <child link="rearCompartment_link"/>
    <origin xyz="${-rearCompartment_xOff} 0.0 ${rearCompartment_zOff}" rpy="0 0 0"/>
  </joint>

  <!-- front caster  -->
  <link name="front_caster">
    <visual>
      <geometry>
        <sphere radius="${caster_radius}"/>
      </geometry>
      <material name="Cyan">
        <color rgba="0 1.0 1.0 1.0"/>
      </material>
    </visual>

    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <sphere radius="${caster_radius}"/>
      </geometry>
    </collision>

    <xacro:sphere_inertia m="0.5" r="${caster_radius}"/>
  </link>

  <joint name="caster_joint" type="fixed">
    <parent link="base_link"/>
    <child link="front_caster"/>
    <origin xyz="${-caster_xOff} 0.0 ${caster_zOff}" rpy="0 0 0"/>
  </joint>

  <!-- The fork -->
  <xacro:forkElement prefix="fork1" x="${-fork_xOff}" y="${fork_yOff}" z="${fork_zOff}" parentLink="base_link"/>
  <xacro:forkElement prefix="fork2" x="${-fork_xOff}" y="${-fork_yOff}" z="${fork_zOff}" parentLink="base_link"/>

  <!-- Sensors -->
  <link name="imu_link">
    <visual>
      <geometry>
        <box size="0.1 0.1 0.1"/>
      </geometry>
    </visual>
    
    <collision>
      <geometry>
        <box size="0.1 0.1 0.1"/>
      </geometry>
    </collision>
      
    <xacro:box_inertia m="0.1" w="0.1" d="0.1" h="0.1"/>
  </link>
    
  <joint name="imu_joint" type="fixed">
    <parent link="base_link"/>
    <child link="imu_link"/>
    <origin xyz="${-imu_xOff} ${imu_yOff} ${imu_zOff}"/>
  </joint>

 <link name="lidar_link">
    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="0.125"/>
      <inertia ixx="0.001"  ixy="0"  ixz="0" iyy="0.001" iyz="0" izz="0.001" />
    </inertial>

    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
         <cylinder radius="0.0508" length="0.055"/>
      </geometry>
    </collision>

    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
         <cylinder radius="0.0508" length="0.055"/>
      </geometry>
    </visual>
  </link>
    
  <joint name="lidar_joint" type="fixed">
    <parent link="base_link"/>
    <child link="lidar_link"/>
    <origin xyz="${-laserScanner_xOff} ${laserScanner_yOff} ${laserScanner_zOff}" rpy="0 0 0"/>
  </joint>
    
  <link name="camera_link">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.015 0.130 0.022"/>
      </geometry>
    </visual>

    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.015 0.130 0.022"/>
      </geometry>
    </collision>

    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="0.035"/>
      <inertia ixx="0.001"  ixy="0"  ixz="0" iyy="0.001" iyz="0" izz="0.001" />
    </inertial>
  </link>
  
  <joint name="camera_joint" type="fixed">
    <parent link="base_link"/>
    <child link="camera_link"/>
    <origin xyz="${-camera_xOff} ${camera_yOff} ${camera_zOff}" rpy="0 0 ${pi}"/>
  </joint>

  <link name="camera_depth_frame"/>

  <joint name="camera_depth_joint" type="fixed">
    <origin xyz="0 0 0" rpy="${-pi/2} 0 ${pi/2}"/>
    <parent link="camera_link"/>
    <child link="camera_depth_frame"/>
  </joint>

  <!-- The Gazebo part -->
  <gazebo reference="front_caster">
    <mu1>0.0</mu1>
    <mu2>0.0</mu2>
    <kp>500000.0</kp>
    <kd>1000000.0</kd>
    <minDepth>0.001</minDepth>
    <material>Gazebo/FlatBlack</material>
  </gazebo>  

  <gazebo reference="fork1_wheel">
    <mu1>100000.0</mu1>
    <mu2>100000.0</mu2>
    <kp>500000.0</kp>
    <kd>1000000.0</kd>
    <minDepth>0.001</minDepth>
    <material>Gazebo/Green</material>
  </gazebo>
  
  <gazebo reference="fork2_wheel">
    <mu1>100000.0</mu1>
    <mu2>100000.0</mu2>
    <kp>500000.0</kp>
    <kd>1000000.0</kd>
    <minDepth>0.001</minDepth>
    <material>Gazebo/Green</material>
  </gazebo>
  
  <gazebo reference="imu_link">
    <sensor name="imu_sensor" type="imu">
      <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
        <ros>
          <namespace>/demo</namespace>
          <remapping>~/out:=imu</remapping>
        </ros>
        <initial_orientation_as_reference>false</initial_orientation_as_reference>
      </plugin>
      <always_on>true</always_on>
      <update_rate>100</update_rate>
      <visualize>true</visualize>
     <imu>
     	<angular_velocity>
     	  <x>
     	    <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </z>
        </angular_velocity>
        <linear_acceleration>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </z>
        </linear_acceleration>
      </imu>
    </sensor>
  </gazebo>
 
  <gazebo>
    <plugin name='diff_drive' filename='libgazebo_ros_diff_drive.so'>
      <!-- wheels -->
      <left_joint>fork1_wheel_joint</left_joint>
      <right_joint>fork2_wheel_joint</right_joint>

      <!-- kinematics -->
      <wheel_separation>${fork_distance}</wheel_separation>
      <wheel_diameter>${2*wheel_radius}</wheel_diameter>

      <!-- limits -->	
      <max_wheel_torque>2e6</max_wheel_torque>
      <max_wheel_acceleration>1.0</max_wheel_acceleration>

      <!-- output -->
      <update_rate>30</update_rate>
      <publish_odom>true</publish_odom>
      <publish_odom_tf>true</publish_odom_tf>
      <publish_wheel_tf>true</publish_wheel_tf>
      <odometry_topic>odom</odometry_topic>
      <odometry_frame>odom</odometry_frame>
      <robot_base_frame>base_link</robot_base_frame>
      <!-- <robot_base_frame>base_footprint</robot_base_frame> -->
    </plugin>
  </gazebo>

  <gazebo reference="lidar_link">
    <sensor name="lidar" type="ray">
      <always_on>true</always_on>
      <visualize>false</visualize>
      <update_rate>5</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>360</samples>
            <resolution>1.000000</resolution>
            <min_angle>0.000000</min_angle>
            <max_angle>6.280000</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.120000</min>
          <max>50.0</max>
          <resolution>0.015000</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin name="scan" filename="libgazebo_ros_ray_sensor.so">
        <ros>
          <remapping>~/out:=scan_raw</remapping>
        </ros>
        <output_type>sensor_msgs/LaserScan</output_type>
        <frame_name>lidar_link</frame_name>
      </plugin>
    </sensor>
  </gazebo>
  
  <gazebo reference="camera_link">
    <sensor name="depth_camera" type="depth">
      <visualize>false</visualize>
      <update_rate>30.0</update_rate>
      <camera name="camera">
        <horizontal_fov>1.047198</horizontal_fov>
        <image>
          <width>640</width>
          <height>480</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.05</near>
          <far>10</far>
        </clip>
      </camera>
      <plugin name="depth_camera_controller" filename="libgazebo_ros_camera.so">
        <baseline>0.2</baseline>
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <frame_name>camera_depth_frame</frame_name>
        <pointCloudCutoff>0.5</pointCloudCutoff>
        <pointCloudCutoffMax>10.0</pointCloudCutoffMax>
        <distortionK1>0</distortionK1>
        <distortionK2>0</distortionK2>
        <distortionK3>0</distortionK3>
        <distortionT1>0</distortionT1>
        <distortionT2>0</distortionT2>
        <CxPrime>0</CxPrime>
        <Cx>0</Cx>
        <Cy>0</Cy>
        <focalLength>0</focalLength>
        <hackbaseline>0</hackbaseline>
      </plugin>
    </sensor>
  </gazebo>

  <gazebo reference="camera_link">
    <material>Gazebo/Grey</material>
    <sensor type="camera" name="rgb_camera">
      <update_rate>30.0</update_rate>
      <camera name="rgb_camera">
      <pose>0 0 0 0 0 0</pose>
        <!-- <horizontal_fov>2.5</horizontal_fov> -->
        <image>
          <width>800</width>
          <height>800</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.01</near>
          <far>50</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <robotNamespace></robotNamespace>
        <alwaysOn>true</alwaysOn>
        <updateRate>30.0</updateRate>
        <cameraName>camera_front_left</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>rgb_camera</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>

</robot>
